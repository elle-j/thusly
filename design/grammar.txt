
Grammar for a small subset of the language (incrementally added).

------------------------------------------------------------------
GRAMMAR TERMINOLOGY
------------------------------------------------------------------

terminal                        A literal to be matched and consumed
nonterminal                     A call to the production rule

------------------------------------------------------------------
GRAMMAR NOTATION
------------------------------------------------------------------

<rule name>:                    Production rule structure
	| <rule definition>
<double quoted char sequence>   Exact terminal
<uppercase char sequence>       Varying terminal
<lowercase char sequence>       Nonterminal

x*                              Match zero or more of x
x+                              Match one or more of x
x?                              Match zero or one of x
x1 x2                           Match x1 then x2
x1 | x2                         Match x1 or x2
( x )                           Match x (everything inside the parentheses)
\                               Escape character
v1 ... v2                       Any value in the range from v1 to v2 inclusive
<                               Start of comment describing the rule
>                               End of comment describing the rule

------------------------------------------------------------------
START RULES
------------------------------------------------------------------

file:
	| statement* EOF

repl:
	| statementRepl			# TODO

------------------------------------------------------------------
STATEMENT RULES
------------------------------------------------------------------

statement:
	| blockStatement
	| expressionStatement
	| ifStatement
	| outStatement			# Temporary until built-in function
	| varStatement

blockStatement:
	| "block" standardBlock

expressionStatement:
	| expression NEWLINE

ifStatement:
	| "if" expression selectionBlock ( "else" selectionBlock )? "end" NEWLINE

outStatement:
	| "@out" expression NEWLINE

varStatement:
	| "var" IDENTIFIER ":" expression NEWLINE

------------------------------------------------------------------
HELPER RULES
------------------------------------------------------------------

standardBlock:
	| NEWLINE statement* "end" NEWLINE

selectionBlock:
	| NEWLINE statement*

------------------------------------------------------------------
EXPRESSION RULES
------------------------------------------------------------------

expression:
	| assignment
	| disjunction

assignment:
	| IDENTIFIER ":" expression			# TODO: Prefix with `( call "." )?` when adding calls

disjunction:
	| conjunction ( "or" conjunction )*

conjunction:
	| equality ( "and" equality )*

equality:
	| comparison ( ( "=" | "!=" ) comparison )*

comparison:
	| term ( ( "<" | "<=" | ">" | ">=" ) term )*

term:
	| factor ( ( "+" | "-" ) factor )*

factor:
	| unary ( ( "*" | "/" | "mod" ) unary )*

unary:
	| ( "not" | "-" ) unary
	| atom								# TODO: Change to `call` when adding calls

atom:
	| IDENTIFIER
	| NUMBER
	| TEXT
	| "true"
	| "false"
	| "none"
	| group

group:
	| "(" expression ")"

------------------------------------------------------------------
LEXICAL RULES
------------------------------------------------------------------

IDENTIFIER:
	| ALPHA ( ALPHA | DIGIT )*

NATIVE_IDENTIFIER:
	| "@" IDENTIFIER

NUMBER:
	| DIGIT+ ( "." DIGIT+ )?

TEXT:
	| "\"" <any ASCII character except "\"">* "\""

ALPHA:
	| "a" ... "z"
	| "A" ... "Z"
	| "_"

DIGIT:
	| "0" ... "9"

NEWLINE:
	| "\n"
	| "\r"
	| "\r\n"

EOF:
	| <end of file>
